// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// Regen by running 'go generate' in the repo root.

package teletron

// The consts listed below represent all the update types that can be requested from telegram.
const (
	UpdateTypeMessage                 = "message"
	UpdateTypeEditedMessage           = "edited_message"
	UpdateTypeChannelPost             = "channel_post"
	UpdateTypeEditedChannelPost       = "edited_channel_post"
	UpdateTypeBusinessConnection      = "business_connection"
	UpdateTypeBusinessMessage         = "business_message"
	UpdateTypeEditedBusinessMessage   = "edited_business_message"
	UpdateTypeDeletedBusinessMessages = "deleted_business_messages"
	UpdateTypeMessageReaction         = "message_reaction"
	UpdateTypeMessageReactionCount    = "message_reaction_count"
	UpdateTypeInlineQuery             = "inline_query"
	UpdateTypeChosenInlineResult      = "chosen_inline_result"
	UpdateTypeCallbackQuery           = "callback_query"
	UpdateTypeShippingQuery           = "shipping_query"
	UpdateTypePreCheckoutQuery        = "pre_checkout_query"
	UpdateTypePurchasedPaidMedia      = "purchased_paid_media"
	UpdateTypePoll                    = "poll"
	UpdateTypePollAnswer              = "poll_answer"
	UpdateTypeMyChatMember            = "my_chat_member"
	UpdateTypeChatMember              = "chat_member"
	UpdateTypeChatJoinRequest         = "chat_join_request"
	UpdateTypeChatBoost               = "chat_boost"
	UpdateTypeRemovedChatBoost        = "removed_chat_boost"
)

// GetType is a helper method to easily identify the type of update that is being received.
func (u Update) GetType() string {
	switch {
	case u.Message != nil:
		return UpdateTypeMessage

	case u.EditedMessage != nil:
		return UpdateTypeEditedMessage

	case u.ChannelPost != nil:
		return UpdateTypeChannelPost

	case u.EditedChannelPost != nil:
		return UpdateTypeEditedChannelPost

	case u.BusinessConnection != nil:
		return UpdateTypeBusinessConnection

	case u.BusinessMessage != nil:
		return UpdateTypeBusinessMessage

	case u.EditedBusinessMessage != nil:
		return UpdateTypeEditedBusinessMessage

	case u.DeletedBusinessMessages != nil:
		return UpdateTypeDeletedBusinessMessages

	case u.MessageReaction != nil:
		return UpdateTypeMessageReaction

	case u.MessageReactionCount != nil:
		return UpdateTypeMessageReactionCount

	case u.InlineQuery != nil:
		return UpdateTypeInlineQuery

	case u.ChosenInlineResult != nil:
		return UpdateTypeChosenInlineResult

	case u.CallbackQuery != nil:
		return UpdateTypeCallbackQuery

	case u.ShippingQuery != nil:
		return UpdateTypeShippingQuery

	case u.PreCheckoutQuery != nil:
		return UpdateTypePreCheckoutQuery

	case u.PurchasedPaidMedia != nil:
		return UpdateTypePurchasedPaidMedia

	case u.Poll != nil:
		return UpdateTypePoll

	case u.PollAnswer != nil:
		return UpdateTypePollAnswer

	case u.MyChatMember != nil:
		return UpdateTypeMyChatMember

	case u.ChatMember != nil:
		return UpdateTypeChatMember

	case u.ChatJoinRequest != nil:
		return UpdateTypeChatJoinRequest

	case u.ChatBoost != nil:
		return UpdateTypeChatBoost

	case u.RemovedChatBoost != nil:
		return UpdateTypeRemovedChatBoost

	default:
		return "unknown"
	}
}

// GetType is a helper method to easily identify the type of update that is being received.
func (u Update) GetChatId() int64 {
	switch {
	case u.Message != nil:
		return u.Message.Chat.Id

	case u.EditedMessage != nil:
		return u.EditedMessage.Chat.Id

	case u.ChannelPost != nil:
		return u.ChannelPost.Chat.Id

	case u.EditedChannelPost != nil:
		return u.EditedChannelPost.Chat.Id

	case u.BusinessConnection != nil:
		return u.BusinessConnection.User.Id

	case u.BusinessMessage != nil:
		return u.BusinessMessage.Chat.Id

	case u.EditedBusinessMessage != nil:
		return u.EditedBusinessMessage.Chat.Id

	case u.DeletedBusinessMessages != nil:
		return u.DeletedBusinessMessages.Chat.Id

	case u.MessageReaction != nil:
		return u.MessageReaction.Chat.Id

	case u.MessageReactionCount != nil:
		return u.MessageReactionCount.Chat.Id

	case u.InlineQuery != nil:
		return u.InlineQuery.From.Id

	case u.ChosenInlineResult != nil:
		return u.ChosenInlineResult.From.Id

	case u.CallbackQuery != nil:
		return u.CallbackQuery.Message.GetChat().Id

	case u.ShippingQuery != nil:
		return u.ShippingQuery.From.Id

	case u.PreCheckoutQuery != nil:
		return u.PreCheckoutQuery.From.Id

	case u.PurchasedPaidMedia != nil:
		return u.PurchasedPaidMedia.From.Id

	case u.PollAnswer != nil:
		return u.PollAnswer.User.Id

	case u.MyChatMember != nil:
		return u.MyChatMember.Chat.Id

	case u.ChatMember != nil:
		return u.ChatMember.Chat.Id

	case u.ChatJoinRequest != nil:
		return u.ChatJoinRequest.Chat.Id

	case u.ChatBoost != nil:
		return u.ChatBoost.Chat.Id

	case u.RemovedChatBoost != nil:
		return u.RemovedChatBoost.Chat.Id

	default:
		return 0
	}
}

// The consts listed below represent all the parse_mode options that can be sent to telegram.
const (
	ParseModeHTML       = "HTML"
	ParseModeMarkdownV2 = "MarkdownV2"
	ParseModeMarkdown   = "Markdown"
	ParseModeNone       = ""
)

// The consts listed below represent all the chat action options that can be sent to telegram.
const (
	ChatActionTyping          = "typing"
	ChatActionUploadPhoto     = "upload_photo"
	ChatActionRecordVideo     = "record_video"
	ChatActionUploadVideo     = "upload_video"
	ChatActionRecordVoice     = "record_voice"
	ChatActionUploadVoice     = "upload_voice"
	ChatActionUploadDocument  = "upload_document"
	ChatActionChooseSticker   = "choose_sticker"
	ChatActionFindLocation    = "find_location"
	ChatActionRecordVideoNote = "record_video_note"
	ChatActionUploadVideoNote = "upload_video_note"
)

// The consts listed below represent all the sticker types that can be obtained from telegram.
const (
	StickerTypeRegular     = "regular"
	StickerTypeMask        = "mask"
	StickerTypeCustomEmoji = "custom_emoji"
)

// The consts listed below represent all the chat types that can be obtained from telegram.
const (
	ChatTypePrivate    = "private"
	ChatTypeGroup      = "group"
	ChatTypeSupergroup = "supergroup"
	ChatTypeChannel    = "channel"
)

// The consts below represent possible status values for a ChatMember.
const (
	ChatMemberStatusOwner         = "creator"
	ChatMemberStatusAdministrator = "administrator"
	ChatMemberStatusMember        = "member"
	ChatMemberStatusRestricted    = "restricted"
	ChatMemberStatusLeft          = "left"
	ChatMemberStatusBanned        = "kicked"
)
